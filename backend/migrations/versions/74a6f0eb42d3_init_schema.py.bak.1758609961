"""init schema (idempotent)"""

from alembic import op
import sqlalchemy as sa

# Keep your original revision ids
revision = '74a6f0eb42d3'
down_revision = 'bae8d55cd229'
branch_labels = None
depends_on = None

def upgrade() -> None:
    bind = op.get_bind()
    insp = sa.inspect(bind)

    # pgvector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # ----- edges.kind (safe) -----
    if "edges" in insp.get_table_names():
        cols = {c["name"] for c in insp.get_columns("edges")}
        if "kind" not in cols:
            op.add_column(
                "edges",
                sa.Column("kind", sa.String(), nullable=True,
                          server_default=sa.text("'unknown'")),
            )
            op.execute("UPDATE edges SET kind = COALESCE(NULLIF(btrim(kind), ''), 'unknown')")
            op.alter_column("edges", "kind",
                            existing_type=sa.String(),
                            nullable=False,
                            server_default=None)

        # indexes (safe if-not-exists)
        op.execute("CREATE INDEX IF NOT EXISTS ix_edges_src_kind ON edges (src_id, kind)")
        op.execute("CREATE INDEX IF NOT EXISTS ix_edges_dst_kind ON edges (dst_id, kind)")

    # ----- tags.created_at (safe) -----
    if "tags" in insp.get_table_names():
        cols = {c["name"] for c in insp.get_columns("tags")}
        if "created_at" not in cols:
            op.add_column(
                "tags",
                sa.Column("created_at", sa.DateTime(timezone=True),
                          nullable=True, server_default=sa.text("now()")),
            )
            op.execute("UPDATE tags SET created_at = COALESCE(created_at, now())")
            op.alter_column("tags", "created_at",
                            existing_type=sa.DateTime(timezone=True),
                            nullable=False,
                            server_default=None)

        op.execute("CREATE INDEX IF NOT EXISTS ix_tags_name ON tags (name)")

    # ----- glyphs/messages indexes (safe) -----
    if "glyphs" in insp.get_table_names():
        op.execute("CREATE INDEX IF NOT EXISTS ix_glyphs_kind_created ON glyphs (kind, created_at)")
    if "messages" in insp.get_table_names():
        op.execute("CREATE INDEX IF NOT EXISTS ix_messages_created ON messages (created_at)")

def downgrade() -> None:
    pass
