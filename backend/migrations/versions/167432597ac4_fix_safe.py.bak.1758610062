"""fix schema (safe/idempotent)"""

from alembic import op
import sqlalchemy as sa

revision = "${NEWREV}"
down_revision = "${DOWNREV}"
branch_labels = None
depends_on = None

def _has_table(inspector, name: str) -> bool:
    return name in inspector.get_table_names()

def _has_column(inspector, table: str, column: str) -> bool:
    if not _has_table(inspector, table):
        return False
    cols = [c["name"] for c in inspector.get_columns(table)]
    return column in cols

def upgrade() -> None:
    bind = op.get_bind()
    insp = sa.inspect(bind)

    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    if _has_table(insp, "edges") and not _has_column(insp, "edges", "kind"):
        op.add_column(
            "edges",
            sa.Column("kind", sa.String(), nullable=True, server_default=sa.text("'unknown'")),
        )
        op.execute("UPDATE edges SET kind = COALESCE(NULLIF(btrim(kind), ''), 'unknown')")
        op.alter_column("edges", "kind", existing_type=sa.String(), nullable=False, server_default=None)

    if _has_table(insp, "tags") and not _has_column(insp, "tags", "created_at"):
        op.add_column(
            "tags",
            sa.Column("created_at", sa.DateTime(timezone=True), nullable=True, server_default=sa.text("now()")),
        )
        op.execute("UPDATE tags SET created_at = COALESCE(created_at, now())")
        op.alter_column("tags", "created_at", existing_type=sa.DateTime(timezone=True), nullable=False, server_default=None)

    if _has_table(insp, "edges"):
        op.execute("CREATE INDEX IF NOT EXISTS ix_edges_src_kind ON edges (src_id, kind)")
        op.execute("CREATE INDEX IF NOT EXISTS ix_edges_dst_kind ON edges (dst_id, kind)")
    if _has_table(insp, "glyphs"):
        op.execute("CREATE INDEX IF NOT EXISTS ix_glyphs_kind_created ON glyphs (kind, created_at)")
    if _has_table(insp, "messages"):
        op.execute("CREATE INDEX IF NOT EXISTS ix_messages_created ON messages (created_at)")
    if _has_table(insp, "tags"):
        op.execute("CREATE INDEX IF NOT EXISTS ix_tags_name ON tags (name)")

def downgrade() -> None:
    pass
