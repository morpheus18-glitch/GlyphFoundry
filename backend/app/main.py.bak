import importlib
import logging
from fastapi import FastAPI, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.gzip import GZipMiddleware
from starlette.responses import PlainTextResponse, JSONResponse
from sqlalchemy.orm import Session

# Logging config (fallback to basic if module missing)
try:
    from .logging_config import configure_logging
except Exception:
    def configure_logging(*args, **kwargs):
        logging.basicConfig(level=logging.INFO)

from .settings import settings
from .db import get_db
from .exports import export_graph_json, export_tags_json
from .ensure_schema import ensure_min_schema
from .ensure_schema import ensure_min_schema


@app.on_event("startup")
def _startup():
    from .db import get_db
    db = next(get_db())
    ensure_min_schema(db)

# Configure logging early
configure_logging("INFO")

app = FastAPI(title="Glyph Foundry API", version="1.0.0")

# Middlewares
app.add_middleware(GZipMiddleware, minimum_size=1024)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[o.strip() for o in settings.cors_allow_origins.split(",") if o.strip()],
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Auto-include any existing routers you already have ---
def _try_include_routers():
    candidates = [
        ("app.routes", ["router", "api", "app_router"]),
        ("app.api", ["router", "api", "app_router"]),
        ("app.endpoints", ["router", "api", "app_router"]),
    ]
    for mod_name, attrs in candidates:
        try:
            mod = importlib.import_module(mod_name)
        except Exception:
            continue
        for attr in attrs:
            r = getattr(mod, attr, None)
            if r is not None:
                try:
                    app.include_router(r)
                    logging.getLogger(__name__).info("Included router: %s.%s", mod_name, attr)
                except Exception as e:
                    logging.getLogger(__name__).warning("Failed to include %s.%s: %s", mod_name, attr, e)

_try_include_routers()

# --- Healthz ---
@app.get("/healthz", response_class=PlainTextResponse)
def healthz():
    return "ok"

# --- Global error guard to keep responses JSON-y ---
@app.exception_handler(Exception)
async def unhandled_exc(_: Request, exc: Exception):
    return JSONResponse(status_code=500, content={"error": "internal", "detail": str(exc)})

# --- Graph 3D data ---
@app.get("/graph3d/data")
def graph3d_data(
    window_minutes: int = 60,
    limit_nodes: int = 300,
    limit_edges: int = 1500,
    db: Session = Depends(get_db),
):
    return export_graph_json(db, limit_nodes, limit_edges, window_minutes)

# --- Tags data ---
@app.get("/tags/data")
def tags_data(db: Session = Depends(get_db)):
    return export_tags_json(db)
