
import React, { useEffect, useRef, useState } from 'react';
import ForceGraph3D from 'three-forcegraph';
import * as THREE from 'three';

const Neural3DGraph = ({ graphData, onNodeClick }) => {
const mountRef = useRef(null);
const fgRef = useRef(null);
const [selectedTime, setSelectedTime] = useState(Date.now());

useEffect(() => {
if (!mountRef.current) return;

```
// Create 3D force graph
const fg = ForceGraph3D({
  controlType: 'orbit',
  rendererConfig: { antialias: true, alpha: true }
})(mountRef.current);

fgRef.current = fg;

// Configure graph appearance
fg.width(800)
  .height(600)
  .backgroundColor('rgba(10, 10, 30, 0.8)')
  .nodeAutoColorBy('kind')
  .nodeThreeObject((node) => {
    // Create neural network style nodes
    const geometry = node.kind === 'message' 
      ? new THREE.SphereGeometry(node.degree * 2 + 3, 16, 16)
      : new THREE.OctahedronGeometry(node.degree + 2);
    
    const material = new THREE.MeshLambertMaterial({
      color: node.kind === 'message' ? 0x64b5f6 : 0x81c784,
      transparent: true,
      opacity: 0.8
    });

    const mesh = new THREE.Mesh(geometry, material);
    
    // Add pulsing effect for active nodes
    if (node.ts && (Date.now() - node.ts * 1000) < 60000) {
      const scale = 1 + 0.3 * Math.sin(Date.now() * 0.005);
      mesh.scale.setScalar(scale);
    }

    return mesh;
  })
  .nodeLabel((node) => `
    <div style="background: rgba(0,0,0,0.8); padding: 10px; border-radius: 5px; color: white;">
      <h3>${node.kind}</h3>
      <p><strong>ID:</strong> ${node.id.slice(0, 8)}...</p>
      <p><strong>Connections:</strong> ${node.degree || 0}</p>
      <p><strong>Label:</strong> ${node.label || 'No description'}</p>
      ${node.summary ? `<p><strong>Summary:</strong> ${node.summary.slice(0, 100)}...</p>` : ''}
    </div>
  `)
  .linkThreeObject((link) => {
    // Create neural network style connections
    const geometry = new THREE.CylinderGeometry(
      link.weight * 2 || 0.5,
      link.weight * 2 || 0.5,
      1,
      8
    );
    
    const material = new THREE.MeshLambertMaterial({
      color: new THREE.Color().setHSL(
        (link.weight || 0.3) * 0.7, 
        0.8, 
        0.5 + (link.weight || 0.3) * 0.5
      ),
      transparent: true,
      opacity: Math.max(0.2, link.weight || 0.3)
    });

    return new THREE.Mesh(geometry, material);
  })
  .linkPositionUpdate((obj, { start, end }) => {
    // Update link positions
    const length = Math.sqrt(
      Math.pow(end.x - start.x, 2) +
      Math.pow(end.y - start.y, 2) +
      Math.pow(end.z - start.z, 2)
    );
    
    obj.scale.z = length;
    obj.position.set((start.x + end.x) / 2, (start.y + end.y) / 2, (start.z + end.z) / 2);
    obj.lookAt(end.x, end.y, end.z);
  })
  .onNodeClick((node) => {
    onNodeClick && onNodeClick(node);
    
    // Camera focus animation
    const distance = 40;
    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);
    
    fg.cameraPosition(
      { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio },
      node,
      3000
    );
  })
  .onNodeRightClick((node) => {
    // Highlight connected nodes
    const connectedNodes = new Set();
    graphData.edges?.forEach(link => {
      if (link.source === node.id || link.source.id === node.id) {
        connectedNodes.add(link.target.id || link.target);
      }
      if (link.target === node.id || link.target.id === node.id) {
        connectedNodes.add(link.source.id || link.source);
      }
    });

    fg.nodeColor(n => connectedNodes.has(n.id) ? 'orange' : (n.id === node.id ? 'red' : null));
  })
  .d3Force('charge', d3.forceCollide(5))
  .d3Force('center', d3.forceCenter(0, 0, 0))
  .enableNodeDrag(true)
  .enableNavigationControls(true);

// Add custom lighting for neural network effect
const scene = fg.scene();

// Ambient light
const ambientLight = new THREE.AmbientLight(0x404040, 0.4);
scene.add(ambientLight);

// Directional light
const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
directionalLight.position.set(100, 100, 50);
scene.add(directionalLight);

// Point lights for depth
const pointLight1 = new THREE.PointLight(0x64b5f6, 0.5, 200);
pointLight1.position.set(50, 50, 50);
scene.add(pointLight1);

const pointLight2 = new THREE.PointLight(0x81c784, 0.5, 200);
pointLight2.position.set(-50, -50, 50);
scene.add(pointLight2);

return () => {
  if (mountRef.current) {
    mountRef.current.innerHTML = '';
  }
};
```

}, []);

// Update graph data when it changes
useEffect(() => {
if (fgRef.current && graphData) {
// Filter data for time dimension if needed
const filteredNodes = graphData.nodes || [];
const filteredEdges = graphData.edges || [];

```
  fgRef.current.graphData({
    nodes: filteredNodes,
    links: filteredEdges
  });
}
```

}, [graphData, selectedTime]);

return (
<div style={{ position: 'relative' }}>
<div ref={mountRef} />

```
  {/* Time control for 4D visualization */}
  <div style={{
    position: 'absolute',
    bottom: '10px',
    left: '10px',
    background: 'rgba(0,0,0,0.7)',
    padding: '10px',
    borderRadius: '5px',
    color: 'white'
  }}>
    <h4>Time Dimension Control</h4>
    <input
      type="range"
      min={Date.now() - 86400000} // 24 hours ago
      max={Date.now()}
      value={selectedTime}
      onChange={(e) => setSelectedTime(parseInt(e.target.value))}
      style={{ width: '200px' }}
    />
    <div style={{ fontSize: '12px', marginTop: '5px' }}>
      {new Date(selectedTime).toLocaleString()}
    </div>
  </div>

  {/* Graph controls */}
  <div style={{
    position: 'absolute',
    top: '10px',
    right: '10px',
    background: 'rgba(0,0,0,0.7)',
    padding: '10px',
    borderRadius: '5px',
    color: 'white'
  }}>
    <h4>Neural Network Controls</h4>
    <button 
      onClick={() => fgRef.current?.zoomToFit(400)}
      style={{ 
        display: 'block', 
        margin: '5px 0', 
        padding: '5px 10px',
        background: '#333',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: 'pointer'
      }}
    >
      Zoom to Fit
    </button>
    <button 
      onClick={() => {
        // Reset highlighting
        fgRef.current?.nodeColor(null);
      }}
      style={{ 
        display: 'block', 
        margin: '5px 0', 
        padding: '5px 10px',
        background: '#333',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: 'pointer'
      }}
    >
      Reset View
    </button>
    <button 
      onClick={() => {
        // Trigger re-simulation
        fgRef.current?.d3ReheatSimulation();
      }}
      style={{ 
        display: 'block', 
        margin: '5px 0', 
        padding: '5px 10px',
        background: '#333',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: 'pointer'
      }}
    >
      Rearrange
    </button>
  </div>
</div>
```

);
};

// Pipeline Control Component
const PipelineControl = ({ onTriggerWorker, pipelineStatus }) => {
const workers = [
{ name: 'nlp_extract', label: 'NLP Extraction', description: 'Generate embeddings from text' },
{ name: 'linker_worker', label: 'Semantic Linking', description: 'Find similar content connections' },
{ name: 'tag_suggester', label: 'Auto Tagging', description: 'Suggest relevant tags' },
{ name: 'layout_worker', label: '3D Layout', description: 'Compute spatial positions' },
{ name: 'curation_worker', label: 'Content Curation', description: 'Quality control and cleanup' }
];

return (
<div style={{
background: '#1a1a2e',
padding: '20px',
borderRadius: '10px',
marginBottom: '20px'
}}>
<h2>Pipeline Control Center</h2>
<div style={{ display: 'grid', gap: '10px' }}>
{workers.map(worker => (
<div key={worker.name} style={{
display: 'flex',
justifyContent: 'space-between',
alignItems: 'center',
padding: '10px',
background: '#2a2a3e',
borderRadius: '5px'
}}>
<div>
<strong>{worker.label}</strong>
<div style={{ fontSize: '12px', opacity: 0.7 }}>
{worker.description}
</div>
</div>
<button
onClick={() => onTriggerWorker(worker.name)}
style={{
padding: '8px 16px',
background: 'linear-gradient(45deg, #667eea, #764ba2)',
color: 'white',
border: 'none',
borderRadius: '5px',
cursor: 'pointer'
}}
>
Trigger
</button>
</div>
))}
</div>
</div>
);
};

export { Neural3DGraph, PipelineControl };
